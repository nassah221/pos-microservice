// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: contract/cashier.proto

package cashier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CashierServiceClient is the client API for CashierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CashierServiceClient interface {
	Signup(ctx context.Context, in *Cashier, opts ...grpc.CallOption) (*Cashier, error)
	Signin(ctx context.Context, in *SigninRequest, opts ...grpc.CallOption) (*SigninResponse, error)
	GetCashier(ctx context.Context, in *GetCashierRequest, opts ...grpc.CallOption) (*Cashier, error)
	ListCashiers(ctx context.Context, in *ListCashiersRequest, opts ...grpc.CallOption) (*ListCashiersResponse, error)
	UpdateCashier(ctx context.Context, in *Cashier, opts ...grpc.CallOption) (*Cashier, error)
	DeleteCashier(ctx context.Context, in *GetCashierRequest, opts ...grpc.CallOption) (*DeleteCashierResponse, error)
}

type cashierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCashierServiceClient(cc grpc.ClientConnInterface) CashierServiceClient {
	return &cashierServiceClient{cc}
}

func (c *cashierServiceClient) Signup(ctx context.Context, in *Cashier, opts ...grpc.CallOption) (*Cashier, error) {
	out := new(Cashier)
	err := c.cc.Invoke(ctx, "/cashier.CashierService/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) Signin(ctx context.Context, in *SigninRequest, opts ...grpc.CallOption) (*SigninResponse, error) {
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, "/cashier.CashierService/Signin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) GetCashier(ctx context.Context, in *GetCashierRequest, opts ...grpc.CallOption) (*Cashier, error) {
	out := new(Cashier)
	err := c.cc.Invoke(ctx, "/cashier.CashierService/GetCashier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) ListCashiers(ctx context.Context, in *ListCashiersRequest, opts ...grpc.CallOption) (*ListCashiersResponse, error) {
	out := new(ListCashiersResponse)
	err := c.cc.Invoke(ctx, "/cashier.CashierService/ListCashiers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) UpdateCashier(ctx context.Context, in *Cashier, opts ...grpc.CallOption) (*Cashier, error) {
	out := new(Cashier)
	err := c.cc.Invoke(ctx, "/cashier.CashierService/UpdateCashier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) DeleteCashier(ctx context.Context, in *GetCashierRequest, opts ...grpc.CallOption) (*DeleteCashierResponse, error) {
	out := new(DeleteCashierResponse)
	err := c.cc.Invoke(ctx, "/cashier.CashierService/DeleteCashier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CashierServiceServer is the server API for CashierService service.
// All implementations must embed UnimplementedCashierServiceServer
// for forward compatibility
type CashierServiceServer interface {
	Signup(context.Context, *Cashier) (*Cashier, error)
	Signin(context.Context, *SigninRequest) (*SigninResponse, error)
	GetCashier(context.Context, *GetCashierRequest) (*Cashier, error)
	ListCashiers(context.Context, *ListCashiersRequest) (*ListCashiersResponse, error)
	UpdateCashier(context.Context, *Cashier) (*Cashier, error)
	DeleteCashier(context.Context, *GetCashierRequest) (*DeleteCashierResponse, error)
	mustEmbedUnimplementedCashierServiceServer()
}

// UnimplementedCashierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCashierServiceServer struct {
}

func (UnimplementedCashierServiceServer) Signup(context.Context, *Cashier) (*Cashier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedCashierServiceServer) Signin(context.Context, *SigninRequest) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signin not implemented")
}
func (UnimplementedCashierServiceServer) GetCashier(context.Context, *GetCashierRequest) (*Cashier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashier not implemented")
}
func (UnimplementedCashierServiceServer) ListCashiers(context.Context, *ListCashiersRequest) (*ListCashiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCashiers not implemented")
}
func (UnimplementedCashierServiceServer) UpdateCashier(context.Context, *Cashier) (*Cashier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCashier not implemented")
}
func (UnimplementedCashierServiceServer) DeleteCashier(context.Context, *GetCashierRequest) (*DeleteCashierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCashier not implemented")
}
func (UnimplementedCashierServiceServer) mustEmbedUnimplementedCashierServiceServer() {}

// UnsafeCashierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CashierServiceServer will
// result in compilation errors.
type UnsafeCashierServiceServer interface {
	mustEmbedUnimplementedCashierServiceServer()
}

func RegisterCashierServiceServer(s grpc.ServiceRegistrar, srv CashierServiceServer) {
	s.RegisterService(&CashierService_ServiceDesc, srv)
}

func _CashierService_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cashier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cashier.CashierService/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).Signup(ctx, req.(*Cashier))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_Signin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigninRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).Signin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cashier.CashierService/Signin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).Signin(ctx, req.(*SigninRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_GetCashier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).GetCashier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cashier.CashierService/GetCashier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).GetCashier(ctx, req.(*GetCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_ListCashiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCashiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).ListCashiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cashier.CashierService/ListCashiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).ListCashiers(ctx, req.(*ListCashiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_UpdateCashier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cashier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).UpdateCashier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cashier.CashierService/UpdateCashier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).UpdateCashier(ctx, req.(*Cashier))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_DeleteCashier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).DeleteCashier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cashier.CashierService/DeleteCashier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).DeleteCashier(ctx, req.(*GetCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CashierService_ServiceDesc is the grpc.ServiceDesc for CashierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CashierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cashier.CashierService",
	HandlerType: (*CashierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _CashierService_Signup_Handler,
		},
		{
			MethodName: "Signin",
			Handler:    _CashierService_Signin_Handler,
		},
		{
			MethodName: "GetCashier",
			Handler:    _CashierService_GetCashier_Handler,
		},
		{
			MethodName: "ListCashiers",
			Handler:    _CashierService_ListCashiers_Handler,
		},
		{
			MethodName: "UpdateCashier",
			Handler:    _CashierService_UpdateCashier_Handler,
		},
		{
			MethodName: "DeleteCashier",
			Handler:    _CashierService_DeleteCashier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract/cashier.proto",
}
